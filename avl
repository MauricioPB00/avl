#include<stdio.h> 
#include<stdlib.h> 




// Avl no da arvore
struct Node 
{ 
	int key; 
	struct Node *left; 
	struct Node *right; 
	int height; 
}; 





// máximo dois números inteiros
int max(int a, int b); 





//altura da árvore
int height(struct Node *N) 
{ 
	if (N == NULL) 
		return 0; 
	return N->height; 
} 






//máximo dois números inteiros
int max(int a, int b) 
{ 
	return (a > b)? a : b; 
} 



//aloca
struct Node* newNode(int key) 
{ 
	struct Node* node = (struct Node*) 
						malloc(sizeof(struct Node)); 
	node->key = key; 
	node->left = NULL; 
	node->right = NULL; 
	node->height = 1; 		
	return(node); 
} 







struct Node *rightRotate(struct Node *y) 
{ 
	struct Node *x = y->left; 
	struct Node *T2 = x->right; 

// rotação 
	x->right = y; 
	y->left = T2; 

// Atualiza
	y->height = max(height(y->left), height(y->right))+1; 
	x->height = max(height(x->left), height(x->right))+1; 
 
	return x; 
} 






struct Node *leftRotate(struct Node *x) 
{ 
	struct Node *y = x->right; 
	struct Node *T2 = y->left; 


	y->left = x; 
	x->right = T2; 


	x->height = max(height(x->left), height(x->right))+1; 
	y->height = max(height(y->left), height(y->right))+1; 

 
	return y; 
} 






// Pega a altura 
int getBalance(struct Node *N) 
{ 
	if (N == NULL) 
		return 0; 
	return height(N->left) - height(N->right); 
} 










struct Node* insert(struct Node* node, int key) 
{ 

// rotação normal
	if (node == NULL) 
		return(newNode(key)); 

	if (key < node->key) 
		node->left = insert(node->left, key); 
	else if (key > node->key) 
		node->right = insert(node->right, key); 
	else 
		return node; 


// Atualiza a altura
	node->height = 1 + max(height(node->left), 
						height(node->right)); 
						

// fator de equilíbrio
	int balance = getBalance(node); 


// Se estiver desbalan: 

	// esquerda esquerda 
	if (balance > 1 && key < node->left->key) 
		return rightRotate(node); 

	// direita direira 
	if (balance < -1 && key > node->right->key) 
		return leftRotate(node); 

	// esqeurda direita 
	if (balance > 1 && key > node->left->key) 
	{ 
		node->left = leftRotate(node->left); 
		return rightRotate(node); 
	} 

	// direita esquerda
	if (balance < -1 && key < node->right->key) 
	{ 
		node->right = rightRotate(node->right); 
		return leftRotate(node); 
	} 
	return node; 
} 








//retorne o nó com o valor mínimo 
struct Node * minValueNode(struct Node* node) 
{ 
	struct Node* current = node; 

// loop p encontrar a folha mais à esquerda 
	while (current->left != NULL) 
		current = current->left; 

	return current; 
} 









struct Node* deleteNode(struct Node* root, int key) 
{ 
	if (root == NULL) 
		return root; 

	
		// esquerda
	if ( key < root->key ) 
		root->left = deleteNode(root->left, key); 


		//direita
	else if( key > root->key ) 
		root->right = deleteNode(root->right, key); 
	
	
	
	else
	{ 
			// nó com apenas 0 filho ou 1
		if( (root->left == NULL) || (root->right == NULL) ) 
		{ 
			struct Node *temp = root->left ? root->left : 
											root->right; 

		 // 0  
			if (temp == NULL) 
			{ 
				temp = root; 
				root = NULL; 
			} 
			else // 1 filho 
			*root = *temp; // pega o valor do filho
			free(temp); 
		} 
		else
		{ 
			
          // nó 2 filhos
          
          //pega o filho da direita
			struct Node* temp = minValueNode(root->right); 

		
           // Copia o filho e torna nó
			root->key = temp->key; 

			
			// Exclui 
			root->right = deleteNode(root->right, temp->key); 
		} 
	} 


			// Se a árvore tiver apenas um nó, retorne
	if (root == NULL) 
	return root; 

			// Atualiza nó
	root->height = 1 + max(height(root->left), 
						height(root->right)); 



		// verifique se desbalanceou  
	int balance = getBalance(root); 


      	// Se nó desequilibrado :
		// esquerda esquerda 
	if (balance > 1 && getBalance(root->left) >= 0) 
		return rightRotate(root); 

	// esqueda direita
	if (balance > 1 && getBalance(root->left) < 0) 
	{ 
		root->left = leftRotate(root->left); 
		return rightRotate(root); 
	} 

	// direita direita 
	if (balance < -1 && getBalance(root->right) <= 0) 
		return leftRotate(root); 

	// direita esquerda
	if (balance < -1 && getBalance(root->right) > 0) 
	{ 
		root->right = rightRotate(root->right); 
		return leftRotate(root); 
	} 

	return root; 
} 








//buscar
  void busca(Node **root, int key){
    if(*root == NULL){  
       printf("\n \n Numero NAO esta na na arvore \n \n");    
       return;
    }
    
    if(key < (*root)->key){
    	busca(&(*root)->left, key);
	}else if(key > (*root)->key){
		busca(&(*root)->right, key);
	}else{  
        printf(" \n\nO numero esta na arvore! \n\n");
    }
}




//imprimir
void inOrdem(struct Node *root){
	if (root != NULL){
		inOrdem(root->left);
		printf("\n%i\t",root->key);
		inOrdem(root->right);
	}
}




void preOrdem(struct Node *root){
	if (root != NULL){
		printf("\n%i\t",root->key);
		preOrdem(root->left);
		preOrdem(root->right);
	}
}




void posOrdem(struct Node *root){
	if (root != NULL){
		posOrdem(root->left);
		posOrdem(root->right);
		printf("\n%i\t",root->key);
	}
}




int main() 
{ 
struct Node *root = NULL; 

int auxiliar, num;


	for( ; ; ){
  	printf("   ========WELCOME========== \n");
  	printf("\t( 1 ) Inserir\n");
  	printf("\t( 2 ) Deletar\n");
  	printf("\t( 3 ) Imprimir\n");
  	printf("\t( 4 ) Sair\n");
  	printf("\t( 5 ) Buscar\n");
  	printf("   ========WELCOME==========\n");
  	scanf("%i", &auxiliar);
  	
  	system("cls");

  	if(auxiliar==4){
  		printf("\n\n");
  		break;
  		
	  }else if(auxiliar==1){
	  		root = insert(root, 9); 
			root = insert(root, 5); 
			root = insert(root, 10); 
			root = insert(root, 0); 
			root = insert(root, 6); 
			root = insert(root, 11); 
			root = insert(root, -1); 
			root = insert(root, 1); 
			root = insert(root, 2);
	  	
	  }else if(auxiliar==2){
	  	printf("Digite o numero que deseja remover: ");
	  	scanf("%i", &num);
	  		root = deleteNode(root, num);
	  	
	  }else if(auxiliar==3){
	  	printf("\n 1- Em ordem \n 2- Pre ordem \n 3- Pos ordem \n ");
	  	scanf("%i", &auxiliar);
	  	
	  	if(auxiliar==1){
	  		inOrdem(root);
		  }else if(auxiliar==2){
		  	preOrdem(root);
		  }else if(auxiliar==3){
		  	posOrdem(root);
		  }else{
		  	printf("invalido");
		  }
	  }	  else if(auxiliar==5){
	  	printf("Qual o numero para a busca ? ");
	  	scanf("%i", &num);
	  	busca(&root, num);
	  }else{
	  	printf("invalido");
	  }
	  printf("\n\n");
  }
  free(root); 
  return 0; 
} 
